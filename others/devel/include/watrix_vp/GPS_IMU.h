// Generated by gencpp from file watrix_vp/GPS_IMU.msg
// DO NOT EDIT!


#ifndef WATRIX_VP_MESSAGE_GPS_IMU_H
#define WATRIX_VP_MESSAGE_GPS_IMU_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace watrix_vp
{
template <class ContainerAllocator>
struct GPS_IMU_
{
  typedef GPS_IMU_<ContainerAllocator> Type;

  GPS_IMU_()
    : header()
    , GPSWeek(0.0)
    , GPSTime(0.0)
    , yaw(0.0)
    , pitch(0.0)
    , roll(0.0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , velocity_earth(0.0)
    , velocity_north(0.0)
    , velocity_up(0.0)
    , baseline(0.0)
    , NSV1(0.0)
    , NSV2(0.0)
    , Status(0.0)
    , position_covariance()
    , angular_covariance()
    , position_covariance_type(0)
    , angular_covariance_type(0)  {
      position_covariance.assign(0.0);

      angular_covariance.assign(0.0);
  }
  GPS_IMU_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , GPSWeek(0.0)
    , GPSTime(0.0)
    , yaw(0.0)
    , pitch(0.0)
    , roll(0.0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , velocity_earth(0.0)
    , velocity_north(0.0)
    , velocity_up(0.0)
    , baseline(0.0)
    , NSV1(0.0)
    , NSV2(0.0)
    , Status(0.0)
    , position_covariance()
    , angular_covariance()
    , position_covariance_type(0)
    , angular_covariance_type(0)  {
  (void)_alloc;
      position_covariance.assign(0.0);

      angular_covariance.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _GPSWeek_type;
  _GPSWeek_type GPSWeek;

   typedef double _GPSTime_type;
  _GPSTime_type GPSTime;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _altitude_type;
  _altitude_type altitude;

   typedef double _velocity_earth_type;
  _velocity_earth_type velocity_earth;

   typedef double _velocity_north_type;
  _velocity_north_type velocity_north;

   typedef double _velocity_up_type;
  _velocity_up_type velocity_up;

   typedef double _baseline_type;
  _baseline_type baseline;

   typedef double _NSV1_type;
  _NSV1_type NSV1;

   typedef double _NSV2_type;
  _NSV2_type NSV2;

   typedef double _Status_type;
  _Status_type Status;

   typedef boost::array<double, 9>  _position_covariance_type;
  _position_covariance_type position_covariance;

   typedef boost::array<double, 9>  _angular_covariance_type;
  _angular_covariance_type angular_covariance;

   typedef uint8_t _position_covariance_type_type;
  _position_covariance_type_type position_covariance_type;

   typedef uint8_t _angular_covariance_type_type;
  _angular_covariance_type_type angular_covariance_type;





  typedef boost::shared_ptr< ::watrix_vp::GPS_IMU_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::watrix_vp::GPS_IMU_<ContainerAllocator> const> ConstPtr;

}; // struct GPS_IMU_

typedef ::watrix_vp::GPS_IMU_<std::allocator<void> > GPS_IMU;

typedef boost::shared_ptr< ::watrix_vp::GPS_IMU > GPS_IMUPtr;
typedef boost::shared_ptr< ::watrix_vp::GPS_IMU const> GPS_IMUConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::watrix_vp::GPS_IMU_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::watrix_vp::GPS_IMU_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace watrix_vp

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'watrix_vp': ['/home/shiyang/advanced_car/src/watrix_vp/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::watrix_vp::GPS_IMU_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::watrix_vp::GPS_IMU_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::watrix_vp::GPS_IMU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::watrix_vp::GPS_IMU_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::watrix_vp::GPS_IMU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::watrix_vp::GPS_IMU_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::watrix_vp::GPS_IMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bd3be3d3b3e80f56ec81dcd5aa6195fd";
  }

  static const char* value(const ::watrix_vp::GPS_IMU_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbd3be3d3b3e80f56ULL;
  static const uint64_t static_value2 = 0xec81dcd5aa6195fdULL;
};

template<class ContainerAllocator>
struct DataType< ::watrix_vp::GPS_IMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "watrix_vp/GPS_IMU";
  }

  static const char* value(const ::watrix_vp::GPS_IMU_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::watrix_vp::GPS_IMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
\n\
float64 GPSWeek\n\
\n\
float64 GPSTime\n\
\n\
\n\
#angular status\n\
\n\
float64 yaw\n\
\n\
float64 pitch\n\
\n\
float64 roll\n\
\n\
\n\
\n\
\n\
\n\
\n\
# Latitude [degrees]. Positive is north of equator; negative is south.\n\
float64 latitude\n\
\n\
# Longitude [degrees]. Positive is east of prime meridian; negative is west.\n\
float64 longitude\n\
\n\
# Altitude [m]. Positive is above the WGS 84 ellipsoid\n\
# (quiet NaN if no altitude is available).\n\
float64 altitude\n\
\n\
\n\
\n\
float64 velocity_earth\n\
\n\
float64 velocity_north\n\
\n\
\n\
float64 velocity_up\n\
\n\
\n\
\n\
\n\
\n\
float64 baseline\n\
\n\
\n\
\n\
\n\
float64 NSV1\n\
\n\
float64 NSV2\n\
\n\
\n\
\n\
float64 Status\n\
\n\
\n\
float64[9] position_covariance\n\
\n\
float64[9] angular_covariance\n\
\n\
\n\
\n\
uint8 position_covariance_type\n\
\n\
uint8 angular_covariance_type\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::watrix_vp::GPS_IMU_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::watrix_vp::GPS_IMU_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.GPSWeek);
      stream.next(m.GPSTime);
      stream.next(m.yaw);
      stream.next(m.pitch);
      stream.next(m.roll);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
      stream.next(m.velocity_earth);
      stream.next(m.velocity_north);
      stream.next(m.velocity_up);
      stream.next(m.baseline);
      stream.next(m.NSV1);
      stream.next(m.NSV2);
      stream.next(m.Status);
      stream.next(m.position_covariance);
      stream.next(m.angular_covariance);
      stream.next(m.position_covariance_type);
      stream.next(m.angular_covariance_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GPS_IMU_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::watrix_vp::GPS_IMU_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::watrix_vp::GPS_IMU_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "GPSWeek: ";
    Printer<double>::stream(s, indent + "  ", v.GPSWeek);
    s << indent << "GPSTime: ";
    Printer<double>::stream(s, indent + "  ", v.GPSTime);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "velocity_earth: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_earth);
    s << indent << "velocity_north: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_north);
    s << indent << "velocity_up: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_up);
    s << indent << "baseline: ";
    Printer<double>::stream(s, indent + "  ", v.baseline);
    s << indent << "NSV1: ";
    Printer<double>::stream(s, indent + "  ", v.NSV1);
    s << indent << "NSV2: ";
    Printer<double>::stream(s, indent + "  ", v.NSV2);
    s << indent << "Status: ";
    Printer<double>::stream(s, indent + "  ", v.Status);
    s << indent << "position_covariance[]" << std::endl;
    for (size_t i = 0; i < v.position_covariance.size(); ++i)
    {
      s << indent << "  position_covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.position_covariance[i]);
    }
    s << indent << "angular_covariance[]" << std::endl;
    for (size_t i = 0; i < v.angular_covariance.size(); ++i)
    {
      s << indent << "  angular_covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.angular_covariance[i]);
    }
    s << indent << "position_covariance_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.position_covariance_type);
    s << indent << "angular_covariance_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.angular_covariance_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WATRIX_VP_MESSAGE_GPS_IMU_H
