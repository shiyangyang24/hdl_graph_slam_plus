# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from watrix_vp/GPS_IMU.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class GPS_IMU(genpy.Message):
  _md5sum = "bd3be3d3b3e80f56ec81dcd5aa6195fd"
  _type = "watrix_vp/GPS_IMU"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header


float64 GPSWeek

float64 GPSTime


#angular status

float64 yaw

float64 pitch

float64 roll






# Latitude [degrees]. Positive is north of equator; negative is south.
float64 latitude

# Longitude [degrees]. Positive is east of prime meridian; negative is west.
float64 longitude

# Altitude [m]. Positive is above the WGS 84 ellipsoid
# (quiet NaN if no altitude is available).
float64 altitude



float64 velocity_earth

float64 velocity_north


float64 velocity_up





float64 baseline




float64 NSV1

float64 NSV2



float64 Status


float64[9] position_covariance

float64[9] angular_covariance



uint8 position_covariance_type

uint8 angular_covariance_type
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','GPSWeek','GPSTime','yaw','pitch','roll','latitude','longitude','altitude','velocity_earth','velocity_north','velocity_up','baseline','NSV1','NSV2','Status','position_covariance','angular_covariance','position_covariance_type','angular_covariance_type']
  _slot_types = ['std_msgs/Header','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64[9]','float64[9]','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,GPSWeek,GPSTime,yaw,pitch,roll,latitude,longitude,altitude,velocity_earth,velocity_north,velocity_up,baseline,NSV1,NSV2,Status,position_covariance,angular_covariance,position_covariance_type,angular_covariance_type

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GPS_IMU, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.GPSWeek is None:
        self.GPSWeek = 0.
      if self.GPSTime is None:
        self.GPSTime = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.roll is None:
        self.roll = 0.
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.altitude is None:
        self.altitude = 0.
      if self.velocity_earth is None:
        self.velocity_earth = 0.
      if self.velocity_north is None:
        self.velocity_north = 0.
      if self.velocity_up is None:
        self.velocity_up = 0.
      if self.baseline is None:
        self.baseline = 0.
      if self.NSV1 is None:
        self.NSV1 = 0.
      if self.NSV2 is None:
        self.NSV2 = 0.
      if self.Status is None:
        self.Status = 0.
      if self.position_covariance is None:
        self.position_covariance = [0.] * 9
      if self.angular_covariance is None:
        self.angular_covariance = [0.] * 9
      if self.position_covariance_type is None:
        self.position_covariance_type = 0
      if self.angular_covariance_type is None:
        self.angular_covariance_type = 0
    else:
      self.header = std_msgs.msg.Header()
      self.GPSWeek = 0.
      self.GPSTime = 0.
      self.yaw = 0.
      self.pitch = 0.
      self.roll = 0.
      self.latitude = 0.
      self.longitude = 0.
      self.altitude = 0.
      self.velocity_earth = 0.
      self.velocity_north = 0.
      self.velocity_up = 0.
      self.baseline = 0.
      self.NSV1 = 0.
      self.NSV2 = 0.
      self.Status = 0.
      self.position_covariance = [0.] * 9
      self.angular_covariance = [0.] * 9
      self.position_covariance_type = 0
      self.angular_covariance_type = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_15d().pack(_x.GPSWeek, _x.GPSTime, _x.yaw, _x.pitch, _x.roll, _x.latitude, _x.longitude, _x.altitude, _x.velocity_earth, _x.velocity_north, _x.velocity_up, _x.baseline, _x.NSV1, _x.NSV2, _x.Status))
      buff.write(_get_struct_9d().pack(*self.position_covariance))
      buff.write(_get_struct_9d().pack(*self.angular_covariance))
      _x = self
      buff.write(_get_struct_2B().pack(_x.position_covariance_type, _x.angular_covariance_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 120
      (_x.GPSWeek, _x.GPSTime, _x.yaw, _x.pitch, _x.roll, _x.latitude, _x.longitude, _x.altitude, _x.velocity_earth, _x.velocity_north, _x.velocity_up, _x.baseline, _x.NSV1, _x.NSV2, _x.Status,) = _get_struct_15d().unpack(str[start:end])
      start = end
      end += 72
      self.position_covariance = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 72
      self.angular_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 2
      (_x.position_covariance_type, _x.angular_covariance_type,) = _get_struct_2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_15d().pack(_x.GPSWeek, _x.GPSTime, _x.yaw, _x.pitch, _x.roll, _x.latitude, _x.longitude, _x.altitude, _x.velocity_earth, _x.velocity_north, _x.velocity_up, _x.baseline, _x.NSV1, _x.NSV2, _x.Status))
      buff.write(self.position_covariance.tostring())
      buff.write(self.angular_covariance.tostring())
      _x = self
      buff.write(_get_struct_2B().pack(_x.position_covariance_type, _x.angular_covariance_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 120
      (_x.GPSWeek, _x.GPSTime, _x.yaw, _x.pitch, _x.roll, _x.latitude, _x.longitude, _x.altitude, _x.velocity_earth, _x.velocity_north, _x.velocity_up, _x.baseline, _x.NSV1, _x.NSV2, _x.Status,) = _get_struct_15d().unpack(str[start:end])
      start = end
      end += 72
      self.position_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      start = end
      end += 72
      self.angular_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 2
      (_x.position_covariance_type, _x.angular_covariance_type,) = _get_struct_2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_15d = None
def _get_struct_15d():
    global _struct_15d
    if _struct_15d is None:
        _struct_15d = struct.Struct("<15d")
    return _struct_15d
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
